#!/bin/bash

# set -x
set -e

ORIGIN=origin
MASTER=$(git branch --format "%(refname:short)" | grep '^master$' || echo main)

Q="--quiet"
CUR_BRANCH=$(git rev-parse --abbrev-ref HEAD 2>/dev/null)

fetched=0

_die(){
	echo "Fatal: $@"
	exit 1
}

_git_is_dirty(){
	git diff --no-ext-diff --quiet --exit-code || echo '*'
	if git rev-parse --quiet --verify HEAD >/dev/null; then
		git diff-index --cached --quiet HEAD -- || echo '+'
	else
		echo '#'
	fi
}

_git_is_untracked(){
	if [ -n "$(git ls-files --others --exclude-standard)" ]; then
		echo '%'
	fi
}

_git_remote_exists(){
	[ -n "$(git rev-parse --verify --quiet --remotes=$1)" ]
}

_git_branch_is_split_brain(){
	result=$(git rev-list --count --left-right $1...$2 2>/dev/null)
	read -d ' ' -r behind ahead <<< "$result"

	[ ${behind:-0} -gt 0 ] && [ ${ahead:-0} -gt 0 ]
}

_require_branch_is_valid_name(){
	if [ -z $1 ]; then
		_die "Please specify a branch name."
	fi

	if [ $1 == $MASTER ]; then
		_die "Please specify a branch name."
	fi
}

_require_local_branch_exists(){
	_require_branch_is_valid_name $1
	git rev-parse --quiet --verify $1 >/dev/null || _die "The base '$1' doesn't exists locally or is not a branch."
}

_lookup_upstream() {
	upstream=$(git rev-parse --verify --quiet --symbolic-full-name --abbrev-ref "$1@{upstream}" 2>/dev/null)
	[ -z "$upstream" ] && upstream=$(git rev-parse --quiet --verify --symbolic-full-name --abbrev-ref $ORIGIN/$BRANCH)
	echo $upstream
}

TIMES_STASHED=0
_git_stash(){
	if [ -n "$(_git_is_dirty)" ] || [ -n "$(_git_is_untracked)" ]; then
		git stash --include-untracked >/dev/null
		TIMES_STASHED=$((TIMES_STASHED + 1))
	fi
}

_git_stash_pop(){
	if [ $TIMES_STASHED -gt 0 ]; then
		git stash pop >/dev/null
		TIMES_STASHED=$((TIMES_STASHED - 1))
	fi
}

_git_checkout(){
	git checkout "$@" || _die "Could not check out branch '$1'."
}

_git_remove_local_branch(){
	[ -n "$1" ] && git branch --delete "$1"
}

_git_remove_remote_branch(){
	[ -n "$1" ] && git push $ORIGIN :"$1"
}


start(){
	BRANCH=$1
	_require_branch_is_valid_name $BRANCH

	_git_stash
	_git_checkout -b $BRANCH $MASTER
	_git_stash_pop
}

finish(){
	BRANCH=${1:-$CUR_BRANCH}
	MASTER=${2:-$MASTER}
	if [ $BRANCH = "." ]; then
		BRANCH="$CUR_BRANCH"
	fi

	_require_local_branch_exists $BRANCH

	BRANCH_UPSTREAM=$(_lookup_upstream $BRANCH)
	if [ -n "$BRANCH_UPSTREAM" ]; then
		_git_fetch
		commits=$(git rev-list --left-right $BRANCH_UPSTREAM...$BRANCH)
		[ -n "$commits" ] && _die "Branches '$BRANCH' and '$BRANCH_UPSTREAM' have diverged. Branches need merging first."
	fi

	if [ -n "$(git rev-list -n2 "$BRANCH..$MASTER")" ]; then
		publish $BRANCH
	fi

	_git_checkout $MASTER
	if [ "$(git rev-list -n2 "$MASTER..$BRANCH" | wc -l)" -eq 1 ]; then
		git merge --ff "$BRANCH"
	else
		git merge --no-ff "$BRANCH"
	fi

	git push $ORIGIN $MASTER || exit 1
	sleep 10 # wait github merge
	_git_remove_local_branch ${BRANCH}
	_git_remove_remote_branch ${BRANCH_UPSTREAM#$ORIGIN/}
}

publish(){
	BRANCH=${1:-$CUR_BRANCH}
	_require_local_branch_exists $BRANCH

	rebase $BRANCH
	echo "Forcing push branch $BRANCH to $ORIGIN..."
	git push --set-upstream --force $ORIGIN $BRANCH || _die "Could not push branch $BRANCH to $ORIGIN."
}

_git_fetch(){
	if (_git_remote_exists $ORIGIN) && [ "$fetch" != "1" ]; then
		fetched=1
		git fetch $ORIGIN || _die "Could not fetch $ORIGIN updates."
	fi
}

rebase(){
	BRANCH=${1:-$CUR_BRANCH}
	_require_local_branch_exists $BRANCH

	if _git_remote_exists $ORIGIN; then
		_git_fetch

		if _git_branch_is_split_brain $MASTER $ORIGIN/$MASTER; then
			_die "Branches '$MASTER' and '$ORIGIN/$MASTER' have diverged. You need manually merging first."
		fi

		_git_stash
		_git_checkout $MASTER
		echo "Rebasing origin updates into $MASTER..."
		git merge $Q --ff-only $ORIGIN/$MASTER
	fi

	echo "Rebasing $MASTER into $BRANCH..."
	_git_checkout $BRANCH
	git rebase $Q $MASTER || _die "Rebase aborted, you need finish the rebase manually."

	if [ $CUR_BRANCH != $BRANCH ]; then
		_git_checkout $CUR_BRANCH
	fi

	_git_stash_pop
}


usage(){
	echo "usage: git solo-flow <subcommand>"
	echo "Available subcommands are:"
	echo "   start     Begin working on a new feature."
	echo "   finish    Merge and clean up branches."
	echo "   publish   Publish branch to origin."
	echo "   rebase    Update and rebase branch on $ORIGIN $MASTER."
}

command=${1:-usage}
shift
case "$command" in
	start) start $@ ;;
	finish) finish $@ ;;
	publish) publish $@ ;;
	rebase) rebase $@ ;;
	*) usage ;;
esac
